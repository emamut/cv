---
import { basics } from "@cvEn"

import 'hotkeypad/reset.css'
import 'hotkeypad/index.css'
import '@tabler/icons-webfont/dist/tabler-icons.min.css';

const { profiles } = basics
const { lng } = Astro.props

const profilesInfo = profiles.map(({ network, url, icon }) => {
  let firstLetter = network[0].toUpperCase()

  return {
    id: network,
    section: "Social",
    title: `Visit ${network}`,
    url,
    icon: `<i class="ti ti-brand-${icon}"></i>`,
    hotkey: `ctrl+${firstLetter}`
  }
})
---

<footer id="normal-footer" class="no-print" set:html={lng === 'en' ?
'Press <kbd>Cmd</kbd> + <kbd>K</kbd> to open the command palette.'
: 'Presiona <kbd>Cmd</kbd> + <kbd>K</kbd> para abrir el panel de comandos.'}></footer>
</footer>

<div id="footer-button" class="no-print">
  <i class="ti ti-command"></i>
</div>

<div
  id="hotkeypad"
  data-placeholder="Search command"
  data-info={JSON.stringify(profilesInfo)}
>
</div>

<script>
  interface Info {
    id: string
    section: string
    title: string
    url: string
    icon: string
    hotkey: string
    handler?: () => void
  }

  import HotKeyPad from "hotkeypad"

  const hotkeypad = new HotKeyPad()
  const info = hotkeypad.instance.getAttribute("data-info") ?? "[]"
  const parsedInfo = JSON.parse(info) as Info[]

  const data = parsedInfo.map(
    ({ url, hotkey, icon, id, section, title }) => {
      return {
        id,
        title,
        icon,
        hotkey,
        section,
        handler: () => {
          window.open(url, "_blank")
        }
      }
    }
  )
  hotkeypad.setCommands([
    {
      id: "print",
      title: "Print",
      icon: `<i class="ti ti-printer"></i>`,
      hotkey: "ctrl+P",
      section: "Actions",
      handler: () => {
        window.print()
      }
    },
    ...data
  ])

  const footerButton = document.getElementById("footer-button")
  footerButton?.addEventListener("click", () => {
    var event = new KeyboardEvent("keydown", {
      key: "K",
      code: "KeyK",
      keyCode: 75,
      which: 75,
      ctrlKey: true,
      altKey: false,
      shiftKey: false,
      metaKey: false
    })

    document.dispatchEvent(event)
  })
</script>

<style>
  @keyframes fadeIn {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }

  @media (min-width: 601px) {
    #normal-footer {
      display: block;
    }

    #footer-button {
      display: none;
    }
  }

  @media (max-width: 600px) {
    #normal-footer {
      display: none;
    }

    #footer-button {
      background: #fff;
      position: fixed;
      border: 1px solid #eee;
      right: 10px;
      bottom: 10px;
      width: 50px;
      height: 50px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
    }
  }

  footer {
    background: #fdfdfd;
    border-top: 1px solid #eee;
    position: fixed;
    bottom: 0px;
    width: 100%;
    padding-block: 8px;
    text-align: center;
    font-size: 0.85rem;

    view-timeline-name: --revealing;
    view-timeline-axis: block;

    animation: linear 0.3s fadeIn;
    animation-timeline: --revealing;
    animation-range: entry 100% cover 10%;
  }

  kbd {
    background: #eee;
    border-radius: 4px;
    padding: 2px 4px;
    font-size: 12px;
  }

  .ti {
    font-size: 1.2rem;
  }
</style>
